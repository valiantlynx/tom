diff -rupN fltk-1.3.2/test/checkers.cxx fltk-1.3.2.opentom/test/checkers.cxx
--- fltk-1.3.2/test/checkers.cxx	2011-07-19 06:49:30.000000000 +0200
+++ fltk-1.3.2.opentom/test/checkers.cxx	2014-02-27 16:19:12.000000000 +0100
@@ -937,10 +937,10 @@ public:
   Board(int w, int h) : Fl_Double_Window(w,h) {color(15);}
 };
 
-#define BOXSIZE 52
-#define BORDER 4
+#define BOXSIZE 26
+#define BORDER 2
 #define BOARDSIZE (8*BOXSIZE+BORDER)
-#define BMOFFSET 5
+#define BMOFFSET 1
 
 static int erase_this;  // real location of dragging piece, don't draw it
 static int dragging;	// piece being dragged
diff -rupN fltk-1.3.2/test/sudoku.cxx fltk-1.3.2.opentom/test/sudoku.cxx
--- fltk-1.3.2/test/sudoku.cxx	2011-07-19 06:49:30.000000000 +0200
+++ fltk-1.3.2.opentom/test/sudoku.cxx	2014-02-27 16:08:03.000000000 +0100
@@ -62,13 +62,13 @@
 // Default sizes...
 //
 
-#define GROUP_SIZE	160
-#define CELL_SIZE	50
-#define CELL_OFFSET	5
+#define GROUP_SIZE	65
+#define CELL_SIZE	20
+#define CELL_OFFSET	1
 #ifdef __APPLE__
 #  define MENU_OFFSET	0
 #else
-#  define MENU_OFFSET	25
+#  define MENU_OFFSET	20
 #endif // __APPLE__
 
 // Sound class for Sudoku...
diff -rupN fltk-1.3.2.original/FL/Fl_File_Chooser.H fltk-1.3.2.opentom/FL/Fl_File_Chooser.H
--- fltk-1.3.2.original/FL/Fl_File_Chooser.H	2011-07-19 06:49:30.000000000 +0200
+++ fltk-1.3.2.opentom/FL/Fl_File_Chooser.H	2014-01-19 15:37:38.000000000 +0100
@@ -1,5 +1,5 @@
 //
-// "$Id: Fl_File_Chooser.H 8864 2011-07-19 04:49:30Z greg.ercolano $"
+// "$Id: Fl_File_Chooser.fl 8864 2011-07-19 04:49:30Z greg.ercolano $"
 //
 // Fl_File_Chooser dialog for the Fast Light Tool Kit (FLTK).
 //
@@ -16,7 +16,7 @@
 //     http://www.fltk.org/str.php
 //
 
-// generated by Fast Light User Interface Designer (fluid) version 1.0300
+// generated by Fast Light User Interface Designer (fluid) version 1.0302
 
 #ifndef Fl_File_Chooser_H
 #define Fl_File_Chooser_H
@@ -62,62 +62,62 @@ public:
   Fl_File_Chooser(const char *d, const char *p, int t, const char *title);
 private:
   Fl_Double_Window *window;
-  void cb_window_i(Fl_Double_Window*, void*);
+  inline void cb_window_i(Fl_Double_Window*, void*);
   static void cb_window(Fl_Double_Window*, void*);
   Fl_Choice *showChoice;
-  void cb_showChoice_i(Fl_Choice*, void*);
+  inline void cb_showChoice_i(Fl_Choice*, void*);
   static void cb_showChoice(Fl_Choice*, void*);
   Fl_Menu_Button *favoritesButton;
-  void cb_favoritesButton_i(Fl_Menu_Button*, void*);
+  inline void cb_favoritesButton_i(Fl_Menu_Button*, void*);
   static void cb_favoritesButton(Fl_Menu_Button*, void*);
 public:
   Fl_Button *newButton;
 private:
-  void cb_newButton_i(Fl_Button*, void*);
+  inline void cb_newButton_i(Fl_Button*, void*);
   static void cb_newButton(Fl_Button*, void*);
-  void cb__i(Fl_Tile*, void*);
+  inline void cb__i(Fl_Tile*, void*);
   static void cb_(Fl_Tile*, void*);
   Fl_File_Browser *fileList;
-  void cb_fileList_i(Fl_File_Browser*, void*);
+  inline void cb_fileList_i(Fl_File_Browser*, void*);
   static void cb_fileList(Fl_File_Browser*, void*);
   Fl_Box *previewBox;
 public:
   Fl_Check_Button *previewButton;
 private:
-  void cb_previewButton_i(Fl_Check_Button*, void*);
+  inline void cb_previewButton_i(Fl_Check_Button*, void*);
   static void cb_previewButton(Fl_Check_Button*, void*);
 public:
   Fl_Check_Button *showHiddenButton;
 private:
-  void cb_showHiddenButton_i(Fl_Check_Button*, void*);
+  inline void cb_showHiddenButton_i(Fl_Check_Button*, void*);
   static void cb_showHiddenButton(Fl_Check_Button*, void*);
   Fl_File_Input *fileName;
-  void cb_fileName_i(Fl_File_Input*, void*);
+  inline void cb_fileName_i(Fl_File_Input*, void*);
   static void cb_fileName(Fl_File_Input*, void*);
   Fl_Return_Button *okButton;
-  void cb_okButton_i(Fl_Return_Button*, void*);
+  inline void cb_okButton_i(Fl_Return_Button*, void*);
   static void cb_okButton(Fl_Return_Button*, void*);
   Fl_Button *cancelButton;
-  void cb_cancelButton_i(Fl_Button*, void*);
+  inline void cb_cancelButton_i(Fl_Button*, void*);
   static void cb_cancelButton(Fl_Button*, void*);
   Fl_Double_Window *favWindow;
   Fl_File_Browser *favList;
-  void cb_favList_i(Fl_File_Browser*, void*);
+  inline void cb_favList_i(Fl_File_Browser*, void*);
   static void cb_favList(Fl_File_Browser*, void*);
   Fl_Button *favUpButton;
-  void cb_favUpButton_i(Fl_Button*, void*);
+  inline void cb_favUpButton_i(Fl_Button*, void*);
   static void cb_favUpButton(Fl_Button*, void*);
   Fl_Button *favDeleteButton;
-  void cb_favDeleteButton_i(Fl_Button*, void*);
+  inline void cb_favDeleteButton_i(Fl_Button*, void*);
   static void cb_favDeleteButton(Fl_Button*, void*);
   Fl_Button *favDownButton;
-  void cb_favDownButton_i(Fl_Button*, void*);
+  inline void cb_favDownButton_i(Fl_Button*, void*);
   static void cb_favDownButton(Fl_Button*, void*);
   Fl_Button *favCancelButton;
-  void cb_favCancelButton_i(Fl_Button*, void*);
+  inline void cb_favCancelButton_i(Fl_Button*, void*);
   static void cb_favCancelButton(Fl_Button*, void*);
   Fl_Return_Button *favOkButton;
-  void cb_favOkButton_i(Fl_Return_Button*, void*);
+  inline void cb_favOkButton_i(Fl_Return_Button*, void*);
   static void cb_favOkButton(Fl_Return_Button*, void*);
 public:
   ~Fl_File_Chooser();
@@ -234,5 +234,5 @@ FL_EXPORT void fl_file_chooser_ok_label(
 #endif
 
 //
-// End of "$Id: Fl_File_Chooser.H 8864 2011-07-19 04:49:30Z greg.ercolano $".
+// End of "$Id: Fl_File_Chooser.fl 8864 2011-07-19 04:49:30Z greg.ercolano $".
 //
diff -rupN fltk-1.3.2.original/FL/Fl_Help_Dialog.H fltk-1.3.2.opentom/FL/Fl_Help_Dialog.H
--- fltk-1.3.2.original/FL/Fl_Help_Dialog.H	2011-07-19 06:49:30.000000000 +0200
+++ fltk-1.3.2.opentom/FL/Fl_Help_Dialog.H	2014-01-19 15:15:28.000000000 +0100
@@ -1,5 +1,5 @@
 //
-// "$Id: Fl_Help_Dialog.H 8864 2011-07-19 04:49:30Z greg.ercolano $"
+// "$Id: Fl_Help_Dialog.fl 8864 2011-07-19 04:49:30Z greg.ercolano $"
 //
 // Fl_Help_Dialog dialog for the Fast Light Tool Kit (FLTK).
 //
@@ -16,10 +16,7 @@
 //     http://www.fltk.org/str.php
 //
 
-/* \file
-   Fl_Help_Dialog widget . */
-
-// generated by Fast Light User Interface Designer (fluid) version 1.0108
+// generated by Fast Light User Interface Designer (fluid) version 1.0302
 
 #ifndef Fl_Help_Dialog_H
 #define Fl_Help_Dialog_H
@@ -34,30 +31,30 @@
 class FL_EXPORT Fl_Help_Dialog {
   int index_; 
   int max_; 
-  int line_[100];                 // FIXME: we must remove those static numbers
-  char file_[100][FL_PATH_MAX];   // FIXME: we must remove those static numbers
+  int line_[100]; 
+  char file_[100][256]; 
   int find_pos_; 
 public:
   Fl_Help_Dialog();
 private:
   Fl_Double_Window *window_;
   Fl_Button *back_;
-  void cb_back__i(Fl_Button*, void*);
+  inline void cb_back__i(Fl_Button*, void*);
   static void cb_back_(Fl_Button*, void*);
   Fl_Button *forward_;
-  void cb_forward__i(Fl_Button*, void*);
+  inline void cb_forward__i(Fl_Button*, void*);
   static void cb_forward_(Fl_Button*, void*);
   Fl_Button *smaller_;
-  void cb_smaller__i(Fl_Button*, void*);
+  inline void cb_smaller__i(Fl_Button*, void*);
   static void cb_smaller_(Fl_Button*, void*);
   Fl_Button *larger_;
-  void cb_larger__i(Fl_Button*, void*);
+  inline void cb_larger__i(Fl_Button*, void*);
   static void cb_larger_(Fl_Button*, void*);
   Fl_Input *find_;
-  void cb_find__i(Fl_Input*, void*);
+  inline void cb_find__i(Fl_Input*, void*);
   static void cb_find_(Fl_Input*, void*);
   Fl_Help_View *view_;
-  void cb_view__i(Fl_Help_View*, void*);
+  inline void cb_view__i(Fl_Help_View*, void*);
   static void cb_view_(Fl_Help_View*, void*);
 public:
   ~Fl_Help_Dialog();
@@ -82,5 +79,5 @@ public:
 #endif
 
 //
-// End of "$Id: Fl_Help_Dialog.H 8864 2011-07-19 04:49:30Z greg.ercolano $".
+// End of "$Id: Fl_Help_Dialog.fl 8864 2011-07-19 04:49:30Z greg.ercolano $".
 //
diff -rupN fltk-1.3.2.original/src/fl_cursor.cxx fltk-1.3.2.opentom/src/fl_cursor.cxx
--- fltk-1.3.2.original/src/fl_cursor.cxx	2012-03-12 12:55:50.000000000 +0100
+++ fltk-1.3.2.opentom/src/fl_cursor.cxx	2014-02-18 23:39:20.000000000 +0100
@@ -269,7 +269,7 @@ static struct TableEntry {
 };
 
 void Fl_Window::cursor(Fl_Cursor c, Fl_Color fg, Fl_Color bg) {
-  if (!shown()) return;
+  return; // CLM if (!shown()) return;
   Cursor xc;
   int deleteit = 0;
   if (c == FL_CURSOR_DEFAULT) {
diff -rupN fltk-1.3.2.original/src/Fl_File_Chooser.cxx fltk-1.3.2.opentom/src/Fl_File_Chooser.cxx
--- fltk-1.3.2.original/src/Fl_File_Chooser.cxx	2011-07-19 06:49:30.000000000 +0200
+++ fltk-1.3.2.opentom/src/Fl_File_Chooser.cxx	2014-01-19 15:37:38.000000000 +0100
@@ -1,5 +1,5 @@
 //
-// "$Id: Fl_File_Chooser.cxx 8864 2011-07-19 04:49:30Z greg.ercolano $"
+// "$Id: Fl_File_Chooser.fl 8864 2011-07-19 04:49:30Z greg.ercolano $"
 //
 // Fl_File_Chooser dialog for the Fast Light Tool Kit (FLTK).
 //
@@ -16,7 +16,7 @@
 //     http://www.fltk.org/str.php
 //
 
-// generated by Fast Light User Interface Designer (fluid) version 1.0300
+// generated by Fast Light User Interface Designer (fluid) version 1.0302
 
 #include "../FL/Fl_File_Chooser.H"
 #include <FL/fl_draw.H>
@@ -158,23 +158,23 @@ void Fl_File_Chooser::cb_favOkButton(Fl_
 
 Fl_File_Chooser::Fl_File_Chooser(const char *d, const char *p, int t, const char *title) {
   Fl_Group *prev_current = Fl_Group::current();
-  { window = new Fl_Double_Window(490, 380, "Choose File");
+  { window = new Fl_Double_Window(315, 232, "Choose File");
     window->callback((Fl_Callback*)cb_window, (void*)(this));
-    { Fl_Group* o = new Fl_Group(10, 10, 470, 25);
-      { showChoice = new Fl_Choice(65, 10, 215, 25, "Show:");
+    { Fl_Group* o = new Fl_Group(0, 0, 317, 20);
+      { showChoice = new Fl_Choice(34, 0, 171, 20, "Show:");
         showChoice->down_box(FL_BORDER_BOX);
         showChoice->labelfont(1);
         showChoice->callback((Fl_Callback*)cb_showChoice);
         Fl_Group::current()->resizable(showChoice);
         showChoice->label(show_label);
       } // Fl_Choice* showChoice
-      { favoritesButton = new Fl_Menu_Button(290, 10, 155, 25, "Favorites");
+      { favoritesButton = new Fl_Menu_Button(206, 0, 87, 20, "Favorites");
         favoritesButton->down_box(FL_BORDER_BOX);
         favoritesButton->callback((Fl_Callback*)cb_favoritesButton);
         favoritesButton->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
         favoritesButton->label(favorites_label);
       } // Fl_Menu_Button* favoritesButton
-      { Fl_Button* o = newButton = new Fl_Button(455, 10, 25, 25);
+      { Fl_Button* o = newButton = new Fl_Button(295, 0, 20, 20);
         newButton->image(image_new);
         newButton->labelsize(8);
         newButton->callback((Fl_Callback*)cb_newButton);
@@ -182,14 +182,14 @@ Fl_File_Chooser::Fl_File_Chooser(const c
       } // Fl_Button* newButton
       o->end();
     } // Fl_Group* o
-    { Fl_Tile* o = new Fl_Tile(10, 45, 470, 225);
+    { Fl_Tile* o = new Fl_Tile(0, 21, 315, 211);
       o->callback((Fl_Callback*)cb_);
-      { fileList = new Fl_File_Browser(10, 45, 295, 225);
+      { fileList = new Fl_File_Browser(0, 21, 210, 160);
         fileList->type(2);
         fileList->callback((Fl_Callback*)cb_fileList);
         fileList->window()->hotspot(fileList);
       } // Fl_File_Browser* fileList
-      { previewBox = new Fl_Box(305, 45, 175, 225, "?");
+      { previewBox = new Fl_Box(209, 21, 106, 160, "?");
         previewBox->box(FL_DOWN_BOX);
         previewBox->labelsize(100);
         previewBox->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
@@ -197,47 +197,47 @@ Fl_File_Chooser::Fl_File_Chooser(const c
       o->end();
       Fl_Group::current()->resizable(o);
     } // Fl_Tile* o
-    { Fl_Group* o = new Fl_Group(10, 275, 470, 95);
-      { Fl_Group* o = new Fl_Group(10, 275, 470, 20);
-        { previewButton = new Fl_Check_Button(10, 275, 73, 20, "Preview");
+    { Fl_Group* o = new Fl_Group(0, 180, 480, 52);
+      { Fl_Group* o = new Fl_Group(0, 183, 470, 50);
+        { previewButton = new Fl_Check_Button(0, 212, 63, 20, "Preview");
           previewButton->shortcut(0x80070);
           previewButton->down_box(FL_DOWN_BOX);
           previewButton->value(1);
           previewButton->callback((Fl_Callback*)cb_previewButton);
           previewButton->label(preview_label);
         } // Fl_Check_Button* previewButton
-        { showHiddenButton = new Fl_Check_Button(115, 275, 165, 20, "Show hidden files");
+        { showHiddenButton = new Fl_Check_Button(68, 212, 88, 20, "Show hidden");
           showHiddenButton->down_box(FL_DOWN_BOX);
           showHiddenButton->callback((Fl_Callback*)cb_showHiddenButton);
           showHiddenButton->label(hidden_label);
         } // Fl_Check_Button* showHiddenButton
-        { Fl_Box* o = new Fl_Box(115, 275, 365, 20);
+        { Fl_Box* o = new Fl_Box(105, 183, 365, 20);
           Fl_Group::current()->resizable(o);
         } // Fl_Box* o
         o->end();
       } // Fl_Group* o
-      { fileName = new Fl_File_Input(115, 300, 365, 35);
+      { fileName = new Fl_File_Input(59, 182, 255, 28);
         fileName->labelfont(1);
         fileName->callback((Fl_Callback*)cb_fileName);
         fileName->when(FL_WHEN_ENTER_KEY);
         Fl_Group::current()->resizable(fileName);
         fileName->when(FL_WHEN_CHANGED | FL_WHEN_ENTER_KEY);
       } // Fl_File_Input* fileName
-      { Fl_Box* o = new Fl_Box(10, 310, 105, 25, "Filename:");
+      { Fl_Box* o = new Fl_Box(0, 187, 61, 25, "Filename:");
         o->labelfont(1);
         o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
         o->label(filename_label);
       } // Fl_Box* o
-      { Fl_Group* o = new Fl_Group(10, 345, 470, 25);
-        { okButton = new Fl_Return_Button(313, 345, 85, 25, "OK");
+      { Fl_Group* o = new Fl_Group(0, 210, 315, 26);
+        { okButton = new Fl_Return_Button(184, 210, 62, 20, "OK");
           okButton->callback((Fl_Callback*)cb_okButton);
           okButton->label(fl_ok);
         } // Fl_Return_Button* okButton
-        { Fl_Button* o = cancelButton = new Fl_Button(408, 345, 72, 25, "Cancel");
+        { Fl_Button* o = cancelButton = new Fl_Button(250, 210, 60, 20, "Cancel");
           cancelButton->callback((Fl_Callback*)cb_cancelButton);
           o->label(fl_cancel);
         } // Fl_Button* cancelButton
-        { Fl_Box* o = new Fl_Box(10, 345, 30, 25);
+        { Fl_Box* o = new Fl_Box(0, 320, 30, 25);
           Fl_Group::current()->resizable(o);
         } // Fl_Box* o
         o->end();
@@ -248,37 +248,37 @@ Fl_File_Chooser::Fl_File_Chooser(const c
     window->set_modal();
     window->end();
   } // Fl_Double_Window* window
-  { favWindow = new Fl_Double_Window(355, 150, "Manage Favorites");
+  { favWindow = new Fl_Double_Window(316, 124, "Manage Favorites");
     favWindow->user_data((void*)(this));
-    { favList = new Fl_File_Browser(10, 10, 300, 95);
+    { favList = new Fl_File_Browser(1, 1, 290, 95);
       favList->type(2);
       favList->callback((Fl_Callback*)cb_favList);
       Fl_Group::current()->resizable(favList);
     } // Fl_File_Browser* favList
-    { Fl_Group* o = new Fl_Group(320, 10, 25, 95);
-      { favUpButton = new Fl_Button(320, 10, 25, 25, "@8>");
+    { Fl_Group* o = new Fl_Group(300, 1, 25, 104);
+      { favUpButton = new Fl_Button(290, 1, 25, 25, "@8>");
         favUpButton->callback((Fl_Callback*)cb_favUpButton);
       } // Fl_Button* favUpButton
-      { favDeleteButton = new Fl_Button(320, 45, 25, 25, "X");
+      { favDeleteButton = new Fl_Button(291, 35, 25, 25, "X");
         favDeleteButton->labelfont(1);
         favDeleteButton->callback((Fl_Callback*)cb_favDeleteButton);
         Fl_Group::current()->resizable(favDeleteButton);
       } // Fl_Button* favDeleteButton
-      { favDownButton = new Fl_Button(320, 80, 25, 25, "@2>");
+      { favDownButton = new Fl_Button(291, 70, 25, 25, "@2>");
         favDownButton->callback((Fl_Callback*)cb_favDownButton);
       } // Fl_Button* favDownButton
       o->end();
     } // Fl_Group* o
-    { Fl_Group* o = new Fl_Group(10, 113, 335, 29);
-      { favCancelButton = new Fl_Button(273, 115, 72, 25, "Cancel");
+    { Fl_Group* o = new Fl_Group(0, 96, 335, 29);
+      { favCancelButton = new Fl_Button(243, 98, 72, 25, "Cancel");
         favCancelButton->callback((Fl_Callback*)cb_favCancelButton);
         favCancelButton->label(fl_cancel);
       } // Fl_Button* favCancelButton
-      { favOkButton = new Fl_Return_Button(181, 115, 79, 25, "Save");
+      { favOkButton = new Fl_Return_Button(155, 98, 79, 25, "Save");
         favOkButton->callback((Fl_Callback*)cb_favOkButton);
         favOkButton->label(save_label);
       } // Fl_Return_Button* favOkButton
-      { Fl_Box* o = new Fl_Box(10, 115, 161, 25);
+      { Fl_Box* o = new Fl_Box(0, 98, 155, 25);
         Fl_Group::current()->resizable(o);
       } // Fl_Box* o
       o->end();
@@ -462,5 +462,5 @@ Fl_Widget* Fl_File_Chooser::add_extra(Fl
 }
 
 //
-// End of "$Id: Fl_File_Chooser.cxx 8864 2011-07-19 04:49:30Z greg.ercolano $".
+// End of "$Id: Fl_File_Chooser.fl 8864 2011-07-19 04:49:30Z greg.ercolano $".
 //
diff -rupN fltk-1.3.2.original/src/Fl_File_Chooser.fl fltk-1.3.2.opentom/src/Fl_File_Chooser.fl
--- fltk-1.3.2.original/src/Fl_File_Chooser.fl	2011-07-19 06:49:30.000000000 +0200
+++ fltk-1.3.2.opentom/src/Fl_File_Chooser.fl	2014-01-19 15:37:33.000000000 +0100
@@ -1,5 +1,5 @@
 # data file for the Fltk User Interface Designer (fluid)
-version 1.0300 
+version 1.0302 
 header_name {../FL/Fl_File_Chooser.H} 
 code_name {.cxx}
 comment {//
@@ -22,112 +22,130 @@ comment {//
 } {in_source in_header
 } 
 
-decl {\#include <FL/fl_draw.H>} {} 
+decl {\#include <FL/fl_draw.H>} {private local
+} 
 
 class FL_EXPORT Fl_File_Chooser {open
 } {
-  decl {enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 };} {public
+  decl {enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 };} {public local
+  }
+  decl {static Fl_Preferences prefs_;} {private local
+  }
+  decl {void (*callback_)(Fl_File_Chooser*, void *);} {private local
+  }
+  decl {void *data_;} {private local
+  }
+  decl {char directory_[FL_PATH_MAX];} {private local
+  }
+  decl {char pattern_[FL_PATH_MAX];} {private local
+  }
+  decl {char preview_text_[2048];} {private local
+  }
+  decl {int type_;} {private local
+  }
+  decl {void favoritesButtonCB();} {private local
+  }
+  decl {void favoritesCB(Fl_Widget *w);} {private local
   }
-  decl {static Fl_Preferences prefs_;} {}
-  decl {void (*callback_)(Fl_File_Chooser*, void *);} {}
-  decl {void *data_;} {}
-  decl {char directory_[FL_PATH_MAX];} {}
-  decl {char pattern_[FL_PATH_MAX];} {}
-  decl {char preview_text_[2048];} {}
-  decl {int type_;} {}
-  decl {void favoritesButtonCB();} {}
-  decl {void favoritesCB(Fl_Widget *w);} {}
-  decl {void fileListCB();} {}
-  decl {void fileNameCB();} {}
-  decl {void newdir();} {}
-  decl {static void previewCB(Fl_File_Chooser *fc);} {}
-  decl {void showChoiceCB();} {}
-  decl {void update_favorites();} {}
-  decl {void update_preview();} {}
-  Function {Fl_File_Chooser(const char *d, const char *p, int t, const char *title)} {} {
+  decl {void fileListCB();} {private local
+  }
+  decl {void fileNameCB();} {private local
+  }
+  decl {void newdir();} {private local
+  }
+  decl {static void previewCB(Fl_File_Chooser *fc);} {private local
+  }
+  decl {void showChoiceCB();} {private local
+  }
+  decl {void update_favorites();} {private local
+  }
+  decl {void update_preview();} {private local
+  }
+  Function {Fl_File_Chooser(const char *d, const char *p, int t, const char *title)} {open
+  } {
     code {Fl_Group *prev_current = Fl_Group::current();} {}
     Fl_Window window {
       label {Choose File}
       callback {fileName->value("");
 fileList->deselect();
 Fl::remove_timeout((Fl_Timeout_Handler)previewCB, this);
-window->hide();} open
-      private xywh {507 327 490 380} type Double resizable
+window->hide();} open selected
+      private xywh {5 19 315 232} type Double resizable
       code0 {if (title) window->label(title);}
       code1 {\#include <stdio.h>}
       code2 {\#include <stdlib.h>}
       code3 {\#include <string.h>} modal visible
     } {
       Fl_Group {} {open
-        private xywh {10 10 470 25}
+        private xywh {0 0 317 20}
       } {
         Fl_Choice showChoice {
           label {Show:}
           callback {showChoiceCB();} open
-          private xywh {65 10 215 25} down_box BORDER_BOX labelfont 1 resizable
+          private xywh {34 0 171 20} down_box BORDER_BOX labelfont 1 resizable
           code0 {showChoice->label(show_label);}
         } {}
         Fl_Menu_Button favoritesButton {
           label Favorites
           callback {favoritesButtonCB();} open
-          private xywh {290 10 155 25} down_box BORDER_BOX align 20
+          private xywh {206 0 87 20} down_box BORDER_BOX align 20
           code0 {favoritesButton->label(favorites_label);}
         } {}
         Fl_Button newButton {
           callback {newdir();}
-          image {new.xbm} xywh {455 10 25 25} labelsize 8
+          image {new.xbm} xywh {295 0 20 20} labelsize 8
           code0 {\#include <FL/Fl_Preferences.H>}
           code1 {o->tooltip(new_directory_tooltip);}
         }
       }
       Fl_Tile {} {
         callback {update_preview();}
-        private xywh {10 45 470 225} resizable
+        private xywh {0 21 315 211} resizable
       } {
         Fl_File_Browser fileList {
           callback {fileListCB();}
-          private xywh {10 45 295 225} type Hold hotspot
+          private xywh {0 21 210 160} type Hold hotspot
           code0 {\#include <FL/Fl_File_Browser.H>}
         }
         Fl_Box previewBox {
           label {?}
-          private xywh {305 45 175 225} box DOWN_BOX labelsize 100 align 80
+          private xywh {209 21 106 160} box DOWN_BOX labelsize 100 align 80
         }
       }
       Fl_Group {} {open
-        private xywh {10 275 470 95}
+        private xywh {0 180 480 52}
       } {
         Fl_Group {} {open
-          private xywh {10 275 470 20}
+          private xywh {0 183 470 50}
         } {
           Fl_Check_Button previewButton {
             label Preview
             callback {preview(previewButton->value());}
-            xywh {10 275 73 20} down_box DOWN_BOX shortcut 0x80070 value 1
+            xywh {0 212 63 20} down_box DOWN_BOX shortcut 0x80070 value 1
             code0 {previewButton->label(preview_label);}
           }
           Fl_Check_Button showHiddenButton {
-            label {Show hidden files}
+            label {Show hidden}
             callback {showHidden(showHiddenButton->value());}
-            xywh {115 275 165 20} down_box DOWN_BOX
+            xywh {68 212 88 20} down_box DOWN_BOX
             code0 {showHiddenButton->label(hidden_label);}
           }
           Fl_Box {} {
-            private xywh {115 275 365 20} resizable
+            private xywh {105 183 365 20} resizable
           }
         }
         Fl_File_Input fileName {
           callback {fileNameCB();}
-          private xywh {115 300 365 35} labelfont 1 when 8 resizable
+          private xywh {59 182 255 28} labelfont 1 when 8 resizable
           code0 {fileName->when(FL_WHEN_CHANGED | FL_WHEN_ENTER_KEY);}
         }
         Fl_Box {} {
           label {Filename:}
-          private xywh {10 310 105 25} labelfont 1 align 24
+          private xywh {0 187 61 25} labelfont 1 align 24
           code0 {o->label(filename_label);}
         }
         Fl_Group {} {open
-          private xywh {10 345 470 25}
+          private xywh {0 210 315 26}
         } {
           Fl_Return_Button okButton {
             label OK
@@ -136,7 +154,7 @@ window->hide();} open
 // Do any callback that is registered...
 if (callback_)
   (*callback_)(this, data_);}
-            private xywh {313 345 85 25}
+            private xywh {184 210 62 20}
             code0 {\#include <FL/fl_ask.H>}
             code1 {okButton->label(fl_ok);}
           }
@@ -146,61 +164,61 @@ if (callback_)
 fileList->deselect();
 Fl::remove_timeout((Fl_Timeout_Handler)previewCB, this);
 window->hide();}
-            private xywh {408 345 72 25}
+            private xywh {250 210 60 20}
             code0 {o->label(fl_cancel);}
           }
           Fl_Box {} {
-            private xywh {10 345 30 25} resizable
+            private xywh {0 320 30 25} resizable
           }
         }
       }
     }
     Fl_Window favWindow {
       label {Manage Favorites}
-      private xywh {413 100 355 150} type Double resizable
+      private xywh {5 20 316 124} type Double resizable
       code0 {favWindow->label(manage_favorites_label);} modal size_range {181 150 0 0} visible
     } {
       Fl_File_Browser favList {
         callback {favoritesCB(favList);}
-        private xywh {10 10 300 95} type Hold resizable
+        private xywh {1 1 290 95} type Hold resizable
       }
       Fl_Group {} {open
-        xywh {320 10 25 95}
+        xywh {300 1 25 104}
       } {
         Fl_Button favUpButton {
           label {@8>}
           callback {favoritesCB(favUpButton);}
-          private xywh {320 10 25 25}
+          private xywh {290 1 25 25}
         }
         Fl_Button favDeleteButton {
           label X
           callback {favoritesCB(favDeleteButton);}
-          private xywh {320 45 25 25} labelfont 1 resizable
+          private xywh {291 35 25 25} labelfont 1 resizable
         }
         Fl_Button favDownButton {
           label {@2>}
           callback {favoritesCB(favDownButton);}
-          private xywh {320 80 25 25}
+          private xywh {291 70 25 25}
         }
       }
       Fl_Group {} {open
-        xywh {10 113 335 29}
+        xywh {0 96 335 29}
       } {
         Fl_Button favCancelButton {
           label Cancel
           callback {favWindow->hide();}
-          private xywh {273 115 72 25}
+          private xywh {243 98 72 25}
           code0 {favCancelButton->label(fl_cancel);}
         }
         Fl_Return_Button favOkButton {
           label Save
           callback {favoritesCB(favOkButton);}
-          private xywh {181 115 79 25}
+          private xywh {155 98 79 25}
           code0 {\#include <FL/fl_ask.H>}
           code1 {favOkButton->label(save_label);}
         }
         Fl_Box {} {
-          xywh {10 115 161 25} resizable
+          xywh {0 98 155 25} resizable
         }
       }
     }
@@ -238,15 +256,15 @@ data_     = d;} {}
   } {
     code {return (fileList->color());} {}
   }
-  decl {int count();} {public
+  decl {int count();} {public local
   }
-  decl {void directory(const char *d);} {public
+  decl {void directory(const char *d);} {public local
   }
   Function {directory()} {return_type {char *}
   } {
     code {return directory_;} {}
   }
-  decl {void filter(const char *p);} {public
+  decl {void filter(const char *p);} {public local
   }
   Function {filter()} {return_type {const char *}
   } {
@@ -294,19 +312,19 @@ okButton->parent()->init_sizes();} {}
   } {
     code {return (okButton->label());} {}
   }
-  decl {void preview(int e);} {public
+  decl {void preview(int e);} {public local
   }
-  decl {int preview() const { return previewButton->value(); }} {public
+  decl {int preview() const { return previewButton->value(); }} {public local
   }
-  decl {void showHidden(int e);} {private
+  decl {void showHidden(int e);} {private local
   }
-  decl {void remove_hidden_files();} {private
+  decl {void remove_hidden_files();} {private local
   }
-  decl {void rescan();} {public
+  decl {void rescan();} {public local
   }
-  decl {void rescan_keep_filename();} {public
+  decl {void rescan_keep_filename();} {public local
   }
-  decl {void show();} {public
+  decl {void show();} {public local
   }
   Function {shown()} {return_type int
   } {
@@ -324,7 +342,7 @@ okButton->parent()->init_sizes();} {}
   } {
     code {fileList->textfont(f);} {}
   }
-  Function {textfont()} {selected return_type Fl_Font
+  Function {textfont()} {return_type Fl_Font
   } {
     code {return (fileList->textfont());} {}
   }
@@ -364,61 +382,62 @@ else
   } {
     code {data_ = d;} {}
   }
-  decl {const char *value(int f = 1);} {public
+  decl {const char *value(int f = 1);} {public local
   }
-  decl {void value(const char *filename);} {public
+  decl {void value(const char *filename);} {public local
   }
   Function {visible()} {return_type int
   } {
     code {return window->visible();} {}
   }
   decl {static const char *add_favorites_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *all_files_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *custom_filter_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *existing_file_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *favorites_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *filename_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *filesystems_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *manage_favorites_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *new_directory_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *new_directory_tooltip;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *preview_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *save_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *show_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static const char *hidden_label;} {
-    comment {[standard text may be customized at run-time]} public
+    comment {[standard text may be customized at run-time]} public local
   }
   decl {static Fl_File_Sort_F *sort;} {
     comment {the sort function that is used when loading
-the contents of a directory.} public
+the contents of a directory.} public local
+  }
+  decl {Fl_Widget* ext_group;} {private local
   }
-  decl {Fl_Widget* ext_group;} {}
   Function {add_extra(Fl_Widget* gr)} {open return_type {Fl_Widget*}
   } {
     code {Fl_Widget* ret=ext_group;} {}
@@ -451,16 +470,16 @@ window->resizable(svres);} {}
   }
 } 
 
-decl {FL_EXPORT char *fl_dir_chooser(const char *message,const char *fname,int relative=0);} {public
+decl {FL_EXPORT char *fl_dir_chooser(const char *message,const char *fname,int relative=0);} {public local
 } 
 
-decl {FL_EXPORT char *fl_file_chooser(const char *message,const char *pat,const char *fname,int relative=0);} {public
+decl {FL_EXPORT char *fl_file_chooser(const char *message,const char *pat,const char *fname,int relative=0);} {public local
 } 
 
-decl {FL_EXPORT void fl_file_chooser_callback(void (*cb)(const char*));} {public
+decl {FL_EXPORT void fl_file_chooser_callback(void (*cb)(const char*));} {public local
 } 
 
-decl {FL_EXPORT void fl_file_chooser_ok_label(const char*l);} {public
+decl {FL_EXPORT void fl_file_chooser_ok_label(const char*l);} {public local
 } 
 
 comment {
diff -rupN fltk-1.3.2.original/src/Fl_Help_Dialog.cxx fltk-1.3.2.opentom/src/Fl_Help_Dialog.cxx
--- fltk-1.3.2.original/src/Fl_Help_Dialog.cxx	2011-07-19 06:49:30.000000000 +0200
+++ fltk-1.3.2.opentom/src/Fl_Help_Dialog.cxx	2014-01-19 15:15:28.000000000 +0100
@@ -1,5 +1,5 @@
 //
-// "$Id: Fl_Help_Dialog.cxx 8864 2011-07-19 04:49:30Z greg.ercolano $"
+// "$Id: Fl_Help_Dialog.fl 8864 2011-07-19 04:49:30Z greg.ercolano $"
 //
 // Fl_Help_Dialog dialog for the Fast Light Tool Kit (FLTK).
 //
@@ -16,7 +16,7 @@
 //     http://www.fltk.org/str.php
 //
 
-// generated by Fast Light User Interface Designer (fluid) version 1.0108
+// generated by Fast Light User Interface Designer (fluid) version 1.0302
 
 #include "../FL/Fl_Help_Dialog.H"
 #include "flstring.h"
@@ -138,37 +138,37 @@ void Fl_Help_Dialog::cb_view_(Fl_Help_Vi
 }
 
 Fl_Help_Dialog::Fl_Help_Dialog() {
-  { window_ = new Fl_Double_Window(530, 385, "Help Dialog");
+  { window_ = new Fl_Double_Window(318, 210, "Help Dialog");
     window_->user_data((void*)(this));
-    { Fl_Group* o = new Fl_Group(10, 10, 511, 25);
-      { back_ = new Fl_Button(10, 10, 25, 25, "@<-");
+    { Fl_Group* o = new Fl_Group(0, 0, 300, 26);
+      { back_ = new Fl_Button(1, 1, 25, 25, "@<-");
         back_->tooltip("Show the previous help page.");
         back_->shortcut(0xff51);
         back_->labelcolor((Fl_Color)2);
         back_->callback((Fl_Callback*)cb_back_);
       } // Fl_Button* back_
-      { forward_ = new Fl_Button(45, 10, 25, 25, "@->");
+      { forward_ = new Fl_Button(35, 1, 25, 25, "@->");
         forward_->tooltip("Show the next help page.");
         forward_->shortcut(0xff53);
         forward_->labelcolor((Fl_Color)2);
         forward_->callback((Fl_Callback*)cb_forward_);
       } // Fl_Button* forward_
-      { smaller_ = new Fl_Button(80, 10, 25, 25, "F");
+      { smaller_ = new Fl_Button(70, 1, 25, 25, "F");
         smaller_->tooltip("Make the help text smaller.");
         smaller_->labelfont(1);
         smaller_->labelsize(10);
         smaller_->callback((Fl_Callback*)cb_smaller_);
       } // Fl_Button* smaller_
-      { larger_ = new Fl_Button(115, 10, 25, 25, "F");
+      { larger_ = new Fl_Button(100, 1, 25, 25, "F");
         larger_->tooltip("Make the help text larger.");
         larger_->labelfont(1);
         larger_->labelsize(16);
         larger_->callback((Fl_Callback*)cb_larger_);
       } // Fl_Button* larger_
-      { Fl_Group* o = new Fl_Group(350, 10, 171, 25);
+      { Fl_Group* o = new Fl_Group(146, 1, 171, 25);
         o->box(FL_DOWN_BOX);
         o->color(FL_BACKGROUND2_COLOR);
-        { find_ = new Fl_Input(375, 12, 143, 21, "@search");
+        { find_ = new Fl_Input(170, 1, 143, 21, "@search");
           find_->tooltip("find text in document");
           find_->box(FL_FLAT_BOX);
           find_->labelsize(13);
@@ -178,12 +178,12 @@ Fl_Help_Dialog::Fl_Help_Dialog() {
         } // Fl_Input* find_
         o->end();
       } // Fl_Group* o
-      { Fl_Box* o = new Fl_Box(150, 10, 190, 25);
+      { Fl_Box* o = new Fl_Box(145, 1, 172, 25);
         Fl_Group::current()->resizable(o);
       } // Fl_Box* o
       o->end();
     } // Fl_Group* o
-    { view_ = new Fl_Help_View(10, 45, 510, 330);
+    { view_ = new Fl_Help_View(0, 27, 317, 182);
       view_->box(FL_DOWN_BOX);
       view_->callback((Fl_Callback*)cb_view_);
       Fl_Group::current()->resizable(view_);
@@ -192,13 +192,13 @@ Fl_Help_Dialog::Fl_Help_Dialog() {
     window_->end();
   } // Fl_Double_Window* window_
   back_->deactivate();
-forward_->deactivate();
-
-index_    = -1;
-max_      = 0;
-find_pos_ = 0;
-
-fl_register_images();
+  forward_->deactivate();
+  
+  index_    = -1;
+  max_      = 0;
+  find_pos_ = 0;
+  
+  fl_register_images();
 }
 
 Fl_Help_Dialog::~Fl_Help_Dialog() {
@@ -215,8 +215,8 @@ void Fl_Help_Dialog::hide() {
 
 void Fl_Help_Dialog::load(const char *f) {
   view_->set_changed();
-view_->load(f);
-window_->label(view_->title());
+  view_->load(f);
+  window_->label(view_->title());
 }
 
 void Fl_Help_Dialog::position(int xx, int yy) {
@@ -237,16 +237,16 @@ void Fl_Help_Dialog::show(int argc, char
 
 void Fl_Help_Dialog::textsize(Fl_Fontsize s) {
   view_->textsize(s);
-
-if (s <= 8)
-  smaller_->deactivate();
-else
-  smaller_->activate();
-
-if (s >= 18)
-  larger_->deactivate();
-else
-  larger_->activate();
+  
+  if (s <= 8)
+    smaller_->deactivate();
+  else
+    smaller_->activate();
+  
+  if (s >= 18)
+    larger_->deactivate();
+  else
+    larger_->activate();
 }
 
 Fl_Fontsize Fl_Help_Dialog::textsize() {
@@ -263,8 +263,8 @@ void Fl_Help_Dialog::topline(int n) {
 
 void Fl_Help_Dialog::value(const char *f) {
   view_->set_changed();
-view_->value(f);
-window_->label(view_->title());
+  view_->value(f);
+  window_->label(view_->title());
 }
 
 const char * Fl_Help_Dialog::value() const {
@@ -288,5 +288,5 @@ int Fl_Help_Dialog::y() {
 }
 
 //
-// End of "$Id: Fl_Help_Dialog.cxx 8864 2011-07-19 04:49:30Z greg.ercolano $".
+// End of "$Id: Fl_Help_Dialog.fl 8864 2011-07-19 04:49:30Z greg.ercolano $".
 //
diff -rupN fltk-1.3.2.original/src/Fl_Help_Dialog.fl fltk-1.3.2.opentom/src/Fl_Help_Dialog.fl
--- fltk-1.3.2.original/src/Fl_Help_Dialog.fl	2011-07-19 06:49:30.000000000 +0200
+++ fltk-1.3.2.opentom/src/Fl_Help_Dialog.fl	2014-01-19 15:15:16.000000000 +0100
@@ -1,5 +1,5 @@
 # data file for the Fltk User Interface Designer (fluid)
-version 1.0108 
+version 1.0302 
 header_name {../FL/Fl_Help_Dialog.H} 
 code_name {.cxx}
 comment {//
@@ -22,25 +22,32 @@ comment {//
 } {in_source in_header
 } 
 
-decl {\#include "flstring.h"} {} 
+decl {\#include "flstring.h"} {private local
+} 
 
-decl {\#include <FL/fl_ask.H>} {} 
+decl {\#include <FL/fl_ask.H>} {private local
+} 
 
 class FL_EXPORT Fl_Help_Dialog {open
 } {
-  decl {int index_;} {}
-  decl {int max_;} {}
-  decl {int line_[100];} {}
-  decl {char file_[100][256];} {}
-  decl {int find_pos_;} {}
+  decl {int index_;} {private local
+  }
+  decl {int max_;} {private local
+  }
+  decl {int line_[100];} {private local
+  }
+  decl {char file_[100][256];} {private local
+  }
+  decl {int find_pos_;} {private local
+  }
   Function {Fl_Help_Dialog()} {open
   } {
     Fl_Window window_ {
       label {Help Dialog} open
-      private xywh {398 64 530 385} type Double resizable size_range {260 150 0 0} visible
+      private xywh {5 61 318 210} type Double resizable size_range {260 150 0 0} visible
     } {
-      Fl_Group {} {open selected
-        xywh {10 10 511 25}
+      Fl_Group {} {open
+        xywh {0 0 300 26}
       } {
         Fl_Button back_ {
           label {@<-}
@@ -58,7 +65,7 @@ if (strcmp(view_->filename(), file_[inde
   view_->load(file_[index_]);
 
 view_->topline(l);}
-          private tooltip {Show the previous help page.} xywh {10 10 25 25} shortcut 0xff51 labelcolor 2
+          private tooltip {Show the previous help page.} xywh {1 1 25 25} shortcut 0xff51 labelcolor 2
         }
         Fl_Button forward_ {
           label {@->}
@@ -76,7 +83,7 @@ if (strcmp(view_->filename(), file_[inde
   view_->load(file_[index_]);
 
 view_->topline(l);}
-          private tooltip {Show the next help page.} xywh {45 10 25 25} shortcut 0xff53 labelcolor 2
+          private tooltip {Show the next help page.} xywh {35 1 25 25} shortcut 0xff53 labelcolor 2
         }
         Fl_Button smaller_ {
           label F
@@ -86,7 +93,7 @@ view_->topline(l);}
 if (view_->textsize() <= 8)
   smaller_->deactivate();
 larger_->activate();}
-          private tooltip {Make the help text smaller.} xywh {80 10 25 25} labelfont 1 labelsize 10
+          private tooltip {Make the help text smaller.} xywh {70 1 25 25} labelfont 1 labelsize 10
         }
         Fl_Button larger_ {
           label F
@@ -96,19 +103,19 @@ larger_->activate();}
 if (view_->textsize() >= 18)
   larger_->deactivate();
 smaller_->activate();}
-          private tooltip {Make the help text larger.} xywh {115 10 25 25} labelfont 1 labelsize 16
+          private tooltip {Make the help text larger.} xywh {100 1 25 25} labelfont 1 labelsize 16
         }
         Fl_Group {} {open
-          xywh {350 10 171 25} box DOWN_BOX color 7
+          xywh {146 1 171 25} box DOWN_BOX color 7
         } {
           Fl_Input find_ {
             label {@search}
             callback {find_pos_ = view_->find(find_->value(), find_pos_);}
-            private tooltip {find text in document} xywh {375 12 143 21} box FLAT_BOX labelsize 13 when 10 textfont 4
+            private tooltip {find text in document} xywh {170 1 143 21} box FLAT_BOX labelsize 13 when 10 textfont 4
           }
         }
         Fl_Box {} {
-          xywh {150 10 190 25} resizable
+          xywh {145 1 172 25} resizable
         }
       }
       Fl_Help_View view_ {
@@ -149,8 +156,8 @@ smaller_->activate();}
   line_[index_] = view_->topline();
   back_->deactivate();
   forward_->deactivate();
-}}
-        private xywh {10 45 510 330} box DOWN_BOX resizable
+}} selected
+        private xywh {0 27 317 182} box DOWN_BOX resizable
       }
     }
     code {back_->deactivate();
diff -rupN fltk-1.3.2.original/src/Fl_x.cxx fltk-1.3.2.opentom/src/Fl_x.cxx
--- fltk-1.3.2.original/src/Fl_x.cxx	2012-10-16 17:35:34.000000000 +0200
+++ fltk-1.3.2.opentom/src/Fl_x.cxx	2014-02-20 18:15:31.000000000 +0100
@@ -43,6 +43,13 @@
 #  include <X11/Xlocale.h>
 #  include <X11/Xlib.h>
 #  include <X11/keysym.h>
+
+#define WITH_NXLIB
+#ifdef WITH_NXLIB
+// For OpenTom.nxlib -> FLTK special keys translation
+#include <microwin/mwtypes.h>
+#define USE_XRANDR 0
+#else
 #define USE_XRANDR (HAVE_DLSYM && HAVE_DLFCN_H) // means attempt to dynamically load libXrandr.so
 #if USE_XRANDR
 #include <dlfcn.h>
@@ -52,6 +59,7 @@ typedef int (*XRRUpdateConfiguration_typ
 static XRRUpdateConfiguration_type XRRUpdateConfiguration_f;
 static int randrEventBase;                  // base of RandR-defined events
 #endif
+#endif
 
 static Fl_Xlib_Graphics_Driver fl_xlib_driver;
 static Fl_Display_Device fl_xlib_display(&fl_xlib_driver);
@@ -912,6 +920,46 @@ static int wasXExceptionRaised() {
 
 }
 
+// For OpenTom.nxlib -> FLTK special keys translation
+unsigned int tr_key_table[] = {
+MWKEY_ENTER       , FL_Enter,
+MWKEY_BACKSPACE   , FL_BackSpace,
+MWKEY_ESCAPE      , FL_Escape,
+MWKEY_LEFT        , FL_Left, 
+MWKEY_RIGHT       , FL_Right,
+MWKEY_UP          , FL_Up, 
+MWKEY_DOWN        , FL_Down, 
+MWKEY_INSERT      , FL_Insert, 
+MWKEY_DELETE      , FL_Delete, 
+MWKEY_HOME        , FL_Home, 
+MWKEY_END         , FL_End,
+MWKEY_PAGEUP      , FL_Page_Up,
+MWKEY_PAGEDOWN    , FL_Page_Down,
+MWKEY_KP0         , FL_KP,	///< One of the keypad numbers; use FL_KP + n for number n.
+MWKEY_KP1         , FL_KP+1,        
+MWKEY_KP2         , FL_KP+2,
+MWKEY_KP3         , FL_KP+3,
+MWKEY_KP4         , FL_KP+4,
+MWKEY_KP5         , FL_KP+5,
+MWKEY_KP6         , FL_KP+6,
+MWKEY_KP7         , FL_KP+7,
+MWKEY_KP8         , FL_KP+8,
+MWKEY_KP9         , FL_KP+9,
+MWKEY_F1          , FL_F+1,
+MWKEY_F2          , FL_F+2,
+MWKEY_F3          , FL_F+3,
+MWKEY_F4          , FL_F+4,
+MWKEY_F5          , FL_F+5,
+MWKEY_F6          , FL_F+6,
+MWKEY_F7          , FL_F+7,
+MWKEY_F8          , FL_F+8,
+MWKEY_F9          , FL_F+9,
+MWKEY_F10	  , FL_F+10,
+MWKEY_F11         , FL_F+11,
+MWKEY_F12         , FL_F+12,
+0	          , 0
+};
+
 
 int fl_handle(const XEvent& thisevent)
 {
@@ -1295,7 +1343,44 @@ int fl_handle(const XEvent& thisevent)
     break;
 
   case KeyPress:
-  case KeyRelease: {
+  case KeyRelease: 
+#ifdef WITH_NXLIB
+   // CLM OpenTom.nxlib -> FLTK special keys translation
+   {
+      //fprintf(stderr,"CLM press(%d)='%c'\n", xevent.xkey.keycode, xevent.xkey.keycode && 0xff);
+      
+      event = (xevent.type == KeyPress) ? FL_KEYDOWN : FL_KEYUP;
+      Fl::e_keysym = 0;
+      for( int i = 0; tr_key_table[i]; i+=2 )
+          if ( tr_key_table[i] == xevent.xkey.keycode) {
+              //fprintf(stderr,"CLM found %x => %x", tr_key_table[i], tr_key_table[i+1]);
+              Fl::e_length = 0;
+              Fl::e_text = "";
+              Fl::e_keysym = tr_key_table[i+1];
+              break;
+          }
+      
+      if ( Fl::e_keysym == 0)  {
+          //fprintf(stderr,"CLM not found 0x%x\n", xevent.xkey.keycode);
+          Fl::e_keysym = (Fl::e_text = (char *)malloc(4))[0] = xevent.xkey.keycode & 0xff;
+          Fl::e_text[1] = 0;
+          Fl::e_length = 1;
+          if ( xevent.xkey.keycode < 27)
+          switch ( Fl::e_keysym) {
+              case 13:  Fl::e_keysym = FL_Enter; break;
+              case 8: Fl::e_keysym = FL_BackSpace; break;
+              case 9: Fl::e_keysym = FL_Tab; break;
+              default:
+                  Fl::e_state |=  FL_CTRL;
+          }
+      }
+      
+      set_event_xy();
+      Fl::e_is_click = 0;
+      break;
+  }
+#else
+  {
   KEYPRESS:
     int keycode = xevent.xkey.keycode;
     fl_key_vector[keycode/8] |= (1 << (keycode%8));
@@ -1503,7 +1588,8 @@ int fl_handle(const XEvent& thisevent)
     set_event_xy();
     Fl::e_is_click = 0; }
     break;
-  
+#endif // not def NONANO_X
+    
   case ButtonPress:
     Fl::e_keysym = FL_Button + xevent.xbutton.button;
     set_event_xy();
diff -rupN fltk-1.3.2.original/test/editor.cxx fltk-1.3.2.opentom/test/editor.cxx
--- fltk-1.3.2.original/test/editor.cxx	2012-11-13 14:03:20.000000000 +0100
+++ fltk-1.3.2.opentom/test/editor.cxx	2014-01-19 15:41:42.000000000 +0100
@@ -764,11 +764,11 @@ Fl_Menu_Item menuitems[] = {
 };
 
 Fl_Window* new_view() {
-  EditorWindow* w = new EditorWindow(660, 400, title);
+  EditorWindow* w = new EditorWindow(310, 220, title);
     w->begin();
-    Fl_Menu_Bar* m = new Fl_Menu_Bar(0, 0, 660, 30);
+    Fl_Menu_Bar* m = new Fl_Menu_Bar(0, 0, 310, 20);
     m->copy(menuitems, w);
-    w->editor = new Fl_Text_Editor(0, 30, 660, 370);
+    w->editor = new Fl_Text_Editor(0, 20, 310, 200);
     w->editor->textfont(FL_COURIER);
     w->editor->textsize(TS);
   //w->editor->wrap_mode(Fl_Text_Editor::WRAP_AT_BOUNDS, 250);
