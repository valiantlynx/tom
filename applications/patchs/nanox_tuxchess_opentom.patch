diff -rupN demos.original/tuxchess/images.c demos/tuxchess/images.c
--- demos.original/tuxchess/images.c	2013-11-26 08:48:45.000000000 +0100
+++ demos/tuxchess/images.c	2014-02-28 10:34:59.000000000 +0100
@@ -3,7 +3,7 @@
 #include <string.h>
 #include "nano-X.h"
 
-#define IMAGE_PATH "demos/tuxchess/images"
+#define IMAGE_PATH "share/tuxchess/images"
 
 extern GR_IMAGE_ID     board_image_id;
 extern GR_IMAGE_INFO   board_info;
diff -rupN demos.original/tuxchess/main.c demos/tuxchess/main.c
--- demos.original/tuxchess/main.c	2013-11-26 08:48:45.000000000 +0100
+++ demos/tuxchess/main.c	2014-02-28 11:25:12.000000000 +0100
@@ -20,8 +20,37 @@
 #include "nano-X.h"
 #define TITLE 		"TuxChess"
 #define SCANCODES	64
+
+/* For 240x240 main window */
+#define MINI
+#ifdef MINI
+/* With images/board.gif resized to 200x200 */
+#define CEL_SIZE 25
+#define BOARD_SIZE (CEL_SIZE*8)
+#define BM_WIDTH 	(BOARD_SIZE+1) /* 394 */
+#define BM_HEIGHT 	(BOARD_SIZE+20) /* 413 */
+
+#define FIXED_23        1
+
+#ifdef FIXED_23
+/* With fixed size 23x23 (mogrify -resize 23x23 ?_*.gif) */
+#define RATIOX(x) 2
+#define RATIOY(x) 1
+#else
+/* With originals resized to 51% (mogrify -resize 51% ?_*.gif) */
+#define RATIOX(x) ((int)(((float)(x*CEL_SIZE))/49.0f))
+#define RATIOY(x) RATIOX(x)
+#endif
+
+#else // def MINI
+#define FIXED_23        0
+#define RATIOX(x)       (x)
+#define RATIOY(x)       (x)
+#define CEL_SIZE        49
+#define BOARD_SIZE      393
 #define BM_WIDTH 	394
 #define BM_HEIGHT 	413
+#endif
 
 
 struct keycolumn {
@@ -35,6 +64,26 @@ struct keyrow {
         struct keycolumn columns[9];
 };
 
+#ifdef MINI
+struct keyrow keyrows[8] = {
+        {0, CEL_SIZE, 
+         {{0,0}, {CEL_SIZE,1}, {(CEL_SIZE*2),2}, {(CEL_SIZE*3),3}, {(CEL_SIZE*4),4}, {(CEL_SIZE*5),5}, {(CEL_SIZE*6),6}, {(CEL_SIZE*7),7}, {999,-1}}},
+        {CEL_SIZE, CEL_SIZE, 
+         {{0,8}, {CEL_SIZE,9}, {(CEL_SIZE*2),10}, {(CEL_SIZE*3),11}, {(CEL_SIZE*4),12}, {(CEL_SIZE*5),13}, {(CEL_SIZE*6),14}, {(CEL_SIZE*7),15}, {999,-1}}},
+        {(CEL_SIZE*2), CEL_SIZE, 
+         {{0,16}, {CEL_SIZE,17}, {(CEL_SIZE*2),18}, {(CEL_SIZE*3),19}, {(CEL_SIZE*4),20}, {(CEL_SIZE*5),21}, {(CEL_SIZE*6),22}, {(CEL_SIZE*7),23}, {999,-1}} },
+        {(CEL_SIZE*3), CEL_SIZE, 
+         {{0,24}, {CEL_SIZE,25}, {(CEL_SIZE*2),26}, {(CEL_SIZE*3),27}, {(CEL_SIZE*4),28}, {(CEL_SIZE*5),29}, {(CEL_SIZE*6),30}, {(CEL_SIZE*7),31}, {999,-1}}},
+        {(CEL_SIZE*4), CEL_SIZE, 
+         {{0,32}, {CEL_SIZE,33}, {(CEL_SIZE*2),34}, {(CEL_SIZE*3),35}, {(CEL_SIZE*4),36}, {(CEL_SIZE*5),37}, {(CEL_SIZE*6),38}, {(CEL_SIZE*7),39}, {999,-1}}},
+        {(CEL_SIZE*5), CEL_SIZE, 
+         {{0,40}, {CEL_SIZE,41}, {(CEL_SIZE*2),42}, {(CEL_SIZE*3),43}, {(CEL_SIZE*4),44}, {(CEL_SIZE*5),45}, {(CEL_SIZE*6),46}, {(CEL_SIZE*7),47}, {999,-1}}},
+        {(CEL_SIZE*6), CEL_SIZE, 
+         {{0,48}, {CEL_SIZE,49}, {(CEL_SIZE*2),50}, {(CEL_SIZE*3),51}, {(CEL_SIZE*4),52}, {(CEL_SIZE*5),53}, {(CEL_SIZE*6),54}, {(CEL_SIZE*7),55}, {999,-1}}},
+        {(CEL_SIZE*7), CEL_SIZE, 
+         {{0,56}, {CEL_SIZE,57}, {(CEL_SIZE*2),58}, {(CEL_SIZE*3),59}, {(CEL_SIZE*4),60}, {(CEL_SIZE*5),61}, {(CEL_SIZE*6),62}, {(CEL_SIZE*7),63}, {999,-1}}}
+};
+#else
 struct keyrow keyrows[8] = {
         {0, 49, 
          {{0,0}, {49,1}, {98,2}, {147,3}, {196,4}, {245,5}, {294,6}, {343,7}, {999,-1}}},
@@ -53,6 +102,7 @@ struct keyrow keyrows[8] = {
         {343, 49, 
          {{0,56}, {49,57}, {98,58}, {147,59}, {196,60}, {245,61}, {294,62}, {343,63}, {999,-1}}}
 };
+#endif
 
 static char *board_position[SCANCODES] = {
 	"A8","B8","C8","D8","E8","F8","G8","H8",
@@ -160,7 +210,7 @@ static void gprintf(char s[])
 	static char lasttext[128];
 
         GrSetGCForeground(text_gc,BLACK);
-        GrFillRect(text, text_gc, 0, 0, 394,20);
+        GrFillRect(text, text_gc, 0, 0, BOARD_SIZE,20);
         GrSetGCForeground(text_gc,WHITE);
         GrSetGCBackground(text_gc,BLACK);
 	if (!s)
@@ -254,8 +304,8 @@ int main(int argc, char* argv[])
 	load_images();
 
         master = GrNewWindow(GR_ROOT_WINDOW_ID, 0, 0, BM_WIDTH, BM_HEIGHT, 0, WHITE, WHITE);
-        board = GrNewWindow((GR_WINDOW_ID) master, 0, 0, 394, 394, 0, WHITE, WHITE);
-        text = GrNewWindow((GR_WINDOW_ID) master, 0, 393, 394, 20, 0, BLACK, BLACK); 
+        board = GrNewWindow((GR_WINDOW_ID) master, 0, 0, BM_WIDTH, BM_WIDTH, 0, WHITE, WHITE);
+        text = GrNewWindow((GR_WINDOW_ID) master, 0, BM_WIDTH-1, BM_WIDTH, 20, 0, BLACK, BLACK); 
 
         GrSelectEvents(master, GR_EVENT_MASK_CLOSE_REQ | GR_EVENT_MASK_EXPOSURE | GR_EVENT_MASK_BUTTON_DOWN);
 
@@ -422,13 +472,16 @@ void print_board(void)
 
 	/* draw background border only*/
 	GrSetGCForeground(gc, WHITE);
+#ifdef MINI
+        GrRect(board, gc, 0, 0, board_w+1, board_h);
+#else
 	GrLine(board, gc, 0,   0, board_w, 0);					/* top*/
 	GrLine(board, gc, 0, board_h-1, board_w, board_h-1);	/* bottom*/
 	GrLine(board, gc, 0,   0, 0, board_h-1);				/* left*/
-	GrLine(board, gc, board_w, 0, board_w, board_h-1);		/* right*/
-
-	GrDrawImageToFit(board, gc, 1, 0, board_w, board_h, board_image_id); 
-
+	GrLine(board, gc, board_w, 0, board_w, board_h-1);		/* right*/      
+#endif
+        GrDrawImageToFit(board, gc, 1, 0, board_w, board_h, board_image_id); 
+        
 	for (row=0;row<8;row++)
 	{
 		for (column=0;column<8;column++)
@@ -442,32 +495,32 @@ void print_board(void)
 						case 'P': 
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+10, y+13, w_p_w, w_p_h, w_p_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(10), y+RATIOY(13), w_p_w, w_p_h, w_p_image_id); 
 							break;
        		                              	case 'N': 
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+9, y+9, w_n_w, w_n_h, w_n_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(9), y+RATIOY(9), w_n_w, w_n_h, w_n_image_id); 
 							break;
        		                              	case 'B': 
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+9, y+9, w_b_w, w_b_h, w_b_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(9), y+RATIOY(9), w_b_w, w_b_h, w_b_image_id); 
 							break;
        		                              	case 'R': 
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+9, y+12, w_r_w, w_r_h, w_r_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(9), y+RATIOY(12), w_r_w, w_r_h, w_r_image_id); 
 							break;
        		                              	case 'Q': 
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+8, y+8, w_q_w, w_q_h, w_q_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(8), y+RATIOY(8), w_q_w, w_q_h, w_q_image_id); 
 							break;
 						case 'K':
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+8, y+5, w_k_w, w_k_h, w_k_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(8), y+RATIOY(5), w_k_w, w_k_h, w_k_image_id); 
 							break;
                        		        }
 					break;
@@ -478,32 +531,32 @@ void print_board(void)
 						case 'P': 
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+10, y+13, b_p_w, b_p_h, b_p_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(10), y+RATIOY(13), b_p_w, b_p_h, b_p_image_id); 
 							break;
        		                              	case 'N': 
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+9, y+9, b_n_w, b_n_h, b_n_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(9), y+RATIOY(9), b_n_w, b_n_h, b_n_image_id); 
 							break;
        		                              	case 'B': 
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+9, y+9, b_b_w, b_b_h, b_b_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(9), y+RATIOY(9), b_b_w, b_b_h, b_b_image_id); 
 							break;
        		                              	case 'R': 
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+9, y+12, b_r_w, b_r_h, b_r_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(9), y+RATIOY(12)+FIXED_23, b_r_w, b_r_h, b_r_image_id); 
 							break;
        		                              	case 'Q': 
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+8, y+8, b_q_w, b_q_h, b_q_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(8), y+RATIOY(8), b_q_w, b_q_h, b_q_image_id); 
 							break;
 						case 'K':
 							x = keyrows[row].columns[column].xoffset;
 							y = keyrows[row].yoffset;
-							GrDrawImageToFit(board, gc, x+8, y+5, b_k_w, b_k_h, b_k_image_id); 
+							GrDrawImageToFit(board, gc, x+RATIOX(8), y+RATIOY(5), b_k_w, b_k_h, b_k_image_id); 
 							break;
                        		        }
 					break;
